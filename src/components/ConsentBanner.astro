---
const config = (await import('@/lib/config')).getConfig();

if (config.monetization.consent.mode === 'off') {
  return null;
}

const isCMPMode = config.monetization.consent.mode === 'cmp';
---

{!isCMPMode && (
  <div id="consent-banner" class="consent-banner" style="display: none;">
    <div class="consent-content">
      <div class="consent-text">
        <p>
          我们使用 cookies 和类似技术来提供更好的用户体验，分析网站流量，并展示个性化内容和广告。
          继续使用本网站即表示您同意我们的隐私政策。
        </p>
      </div>
      
      <div class="consent-actions">
        <button id="accept-all" class="btn btn-accept">
          接受所有
        </button>
        <button id="accept-necessary" class="btn btn-necessary">
          仅必要
        </button>
        <button id="manage-preferences" class="btn btn-manage">
          管理偏好
        </button>
      </div>
    </div>
  </div>
)}

{isCMPMode && (
  <div id="cmp-placeholder">
    <!-- CMP will be loaded here -->
  </div>
)}

<!-- Preferences Modal -->
{!isCMPMode && (
  <div id="preferences-modal" class="preferences-modal" style="display: none;">
    <div class="modal-overlay"></div>
    <div class="modal-content">
      <div class="modal-header">
        <h3>隐私偏好设置</h3>
        <button id="close-preferences" class="close-btn">&times;</button>
      </div>
      
      <div class="modal-body">
        <div class="preference-section">
          <div class="preference-item">
            <label class="preference-label">
              <input type="checkbox" id="necessary-cookies" checked disabled>
              <span class="checkmark"></span>
              <div class="preference-info">
                <strong>必要 Cookies</strong>
                <p>这些 cookies 对网站功能至关重要，无法禁用。</p>
              </div>
            </label>
          </div>
          
          <div class="preference-item">
            <label class="preference-label">
              <input type="checkbox" id="analytics-cookies">
              <span class="checkmark"></span>
              <div class="preference-info">
                <strong>分析 Cookies</strong>
                <p>帮助我们了解访客如何使用我们的网站。</p>
              </div>
            </label>
          </div>
          
          <div class="preference-item">
            <label class="preference-label">
              <input type="checkbox" id="advertising-cookies">
              <span class="checkmark"></span>
              <div class="preference-info">
                <strong>广告 Cookies</strong>
                <p>用于显示相关的个性化广告。</p>
              </div>
            </label>
          </div>
        </div>
      </div>
      
      <div class="modal-footer">
        <button id="save-preferences" class="btn btn-accept">
          保存设置
        </button>
        <button id="cancel-preferences" class="btn btn-secondary">
          取消
        </button>
      </div>
    </div>
  </div>
)}

<script>
  // Consent Management
  class ConsentManager {
    constructor() {
      this.consentKey = 'k2site_consent';
      this.init();
    }
    
    init() {
      if (this.hasConsent()) {
        this.applyConsent();
      } else {
        this.showConsentBanner();
      }
      
      this.bindEvents();
    }
    
    hasConsent() {
      return localStorage.getItem(this.consentKey) !== null;
    }
    
    getConsent() {
      const stored = localStorage.getItem(this.consentKey);
      return stored ? JSON.parse(stored) : null;
    }
    
    setConsent(consent) {
      localStorage.setItem(this.consentKey, JSON.stringify({
        ...consent,
        timestamp: Date.now(),
        version: '1.0'
      }));
      
      this.applyConsent();
      this.hideConsentBanner();
      
      // Trigger Google Consent Mode update if available
      if (typeof gtag !== 'undefined') {
        gtag('consent', 'update', {
          'analytics_storage': consent.analytics ? 'granted' : 'denied',
          'ad_storage': consent.advertising ? 'granted' : 'denied',
          'ad_user_data': consent.advertising ? 'granted' : 'denied',
          'ad_personalization': consent.advertising ? 'granted' : 'denied'
        });
      }
    }
    
    applyConsent() {
      const consent = this.getConsent();
      if (!consent) return;
      
      // Load analytics if consented
      if (consent.analytics && !window.gtag) {
        this.loadGoogleAnalytics();
      }
      
      // AdSense will be loaded by AdSlot component if consented
    }
    
    loadGoogleAnalytics() {
      // Load Google Analytics 4
      const script = document.createElement('script');
      script.async = true;
      script.src = `https://www.googletagmanager.com/gtag/js?id=${window.GA_TRACKING_ID || 'G-XXXXXXXXXX'}`;
      document.head.appendChild(script);
      
      script.onload = () => {
        window.dataLayer = window.dataLayer || [];
        function gtag(){dataLayer.push(arguments);}
        window.gtag = gtag;
        
        gtag('js', new Date());
        gtag('config', window.GA_TRACKING_ID || 'G-XXXXXXXXXX', {
          anonymize_ip: true
        });
      };
    }
    
    showConsentBanner() {
      const banner = document.getElementById('consent-banner');
      if (banner) {
        banner.style.display = 'block';
        document.body.classList.add('consent-banner-visible');
      }
    }
    
    hideConsentBanner() {
      const banner = document.getElementById('consent-banner');
      if (banner) {
        banner.style.display = 'none';
        document.body.classList.remove('consent-banner-visible');
      }
    }
    
    showPreferences() {
      const modal = document.getElementById('preferences-modal');
      if (modal) {
        modal.style.display = 'block';
        document.body.classList.add('modal-open');
        
        // Load current preferences
        const consent = this.getConsent() || {};
        const analyticsEl = document.getElementById('analytics-cookies') as HTMLInputElement;
        const advertisingEl = document.getElementById('advertising-cookies') as HTMLInputElement;
        if (analyticsEl) analyticsEl.checked = consent.analytics || false;
        if (advertisingEl) advertisingEl.checked = consent.advertising || false;
      }
    }
    
    hidePreferences() {
      const modal = document.getElementById('preferences-modal');
      if (modal) {
        modal.style.display = 'none';
        document.body.classList.remove('modal-open');
      }
    }
    
    bindEvents() {
      // Consent banner buttons
      document.getElementById('accept-all')?.addEventListener('click', () => {
        this.setConsent({
          necessary: true,
          analytics: true,
          advertising: true
        });
      });
      
      document.getElementById('accept-necessary')?.addEventListener('click', () => {
        this.setConsent({
          necessary: true,
          analytics: false,
          advertising: false
        });
      });
      
      document.getElementById('manage-preferences')?.addEventListener('click', () => {
        this.showPreferences();
      });
      
      // Preferences modal
      document.getElementById('close-preferences')?.addEventListener('click', () => {
        this.hidePreferences();
      });
      
      document.getElementById('cancel-preferences')?.addEventListener('click', () => {
        this.hidePreferences();
      });
      
      document.getElementById('save-preferences')?.addEventListener('click', () => {
        const analytics = (document.getElementById('analytics-cookies') as HTMLInputElement)?.checked;
        const advertising = (document.getElementById('advertising-cookies') as HTMLInputElement)?.checked;
        
        this.setConsent({
          necessary: true,
          analytics: analytics,
          advertising: advertising
        });
        
        this.hidePreferences();
      });
      
      // Modal overlay click
      document.querySelector('.modal-overlay')?.addEventListener('click', () => {
        this.hidePreferences();
      });
    }
  }
  
  // Initialize consent manager when DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      new ConsentManager();
    });
  } else {
    new ConsentManager();
  }
</script>

<style>
.consent-banner {
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
  background: rgba(0, 0, 0, 0.95);
  color: white;
  padding: 1.5rem;
  z-index: 9999;
  backdrop-filter: blur(10px);
}

.consent-content {
  max-width: 1200px;
  margin: 0 auto;
  display: flex;
  align-items: center;
  gap: 2rem;
  flex-wrap: wrap;
}

.consent-text {
  flex: 1;
  min-width: 300px;
}

.consent-text p {
  margin: 0;
  line-height: 1.5;
  font-size: 0.9rem;
}

.consent-actions {
  display: flex;
  gap: 1rem;
  flex-wrap: wrap;
}

.btn {
  padding: 0.75rem 1.5rem;
  border: none;
  border-radius: 0.375rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s;
  font-size: 0.875rem;
}

.btn-accept {
  background: #3b82f6;
  color: white;
}

.btn-accept:hover {
  background: #2563eb;
}

.btn-necessary {
  background: transparent;
  color: white;
  border: 1px solid #6b7280;
}

.btn-necessary:hover {
  background: #374151;
}

.btn-manage {
  background: transparent;
  color: #9ca3af;
  text-decoration: underline;
}

.btn-manage:hover {
  color: white;
}

.btn-secondary {
  background: #6b7280;
  color: white;
}

.btn-secondary:hover {
  background: #4b5563;
}

/* Preferences Modal */
.preferences-modal {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  z-index: 10000;
}

.modal-overlay {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
}

.modal-content {
  position: relative;
  background: white;
  max-width: 600px;
  margin: 5% auto;
  border-radius: 0.5rem;
  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
  max-height: 80vh;
  overflow-y: auto;
}

.modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1.5rem;
  border-bottom: 1px solid #e5e7eb;
}

.modal-header h3 {
  margin: 0;
  font-size: 1.25rem;
  font-weight: 600;
}

.close-btn {
  background: none;
  border: none;
  font-size: 1.5rem;
  cursor: pointer;
  color: #6b7280;
  padding: 0;
  width: 2rem;
  height: 2rem;
  display: flex;
  align-items: center;
  justify-content: center;
}

.modal-body {
  padding: 1.5rem;
}

.preference-section {
  space-y: 1.5rem;
}

.preference-item {
  border: 1px solid #e5e7eb;
  border-radius: 0.5rem;
  padding: 1rem;
}

.preference-label {
  display: flex;
  align-items: flex-start;
  gap: 1rem;
  cursor: pointer;
}

.preference-label input[type="checkbox"] {
  margin: 0;
  width: 1.25rem;
  height: 1.25rem;
  flex-shrink: 0;
}

.preference-info strong {
  display: block;
  margin-bottom: 0.25rem;
  color: #111827;
}

.preference-info p {
  margin: 0;
  color: #6b7280;
  font-size: 0.875rem;
  line-height: 1.4;
}

.modal-footer {
  display: flex;
  justify-content: flex-end;
  gap: 1rem;
  padding: 1.5rem;
  border-top: 1px solid #e5e7eb;
}

/* Body scroll lock */
body.modal-open {
  overflow: hidden;
}

body.consent-banner-visible {
  padding-bottom: 120px;
}

/* Mobile responsive */
@media (max-width: 768px) {
  .consent-content {
    flex-direction: column;
    align-items: stretch;
    gap: 1rem;
  }
  
  .consent-actions {
    justify-content: center;
  }
  
  .modal-content {
    margin: 1rem;
    max-height: calc(100vh - 2rem);
  }
  
  .modal-footer {
    flex-direction: column;
  }
  
  body.consent-banner-visible {
    padding-bottom: 160px;
  }
}

@media (max-width: 480px) {
  .consent-actions {
    flex-direction: column;
  }
  
  body.consent-banner-visible {
    padding-bottom: 200px;
  }
}
</style>