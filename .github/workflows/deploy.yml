name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 9
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'pnpm'
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Type check
      run: pnpm run typecheck
      
    - name: Lint code
      run: pnpm run lint
      
    - name: Run tests
      run: pnpm run test
      
    - name: Build site
      run: pnpm run build
      
    - name: Generate SEO files
      run: |
        node -e "
          const { sitemapGenerator, robotsGenerator } = require('./dist/lib/sitemap.js');
          const { rssGenerator } = require('./dist/lib/rss.js');
          Promise.all([
            sitemapGenerator.saveSitemap('./dist/sitemap.xml'),
            robotsGenerator.saveRobots('./dist/robots.txt'),
            rssGenerator.saveRSS('./dist/rss.xml')
          ]).then(() => console.log('SEO files generated'));
        "
      
    # Deploy to Cloudflare Pages
    - name: Deploy to Cloudflare Pages
      if: ${{ !contains(github.event.head_commit.message, '[skip-cf]') }}
      uses: cloudflare/pages-action@v1
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        projectName: ${{ secrets.CLOUDFLARE_PROJECT_NAME }}
        directory: dist
        gitHubToken: ${{ secrets.GITHUB_TOKEN }}
        
    # Deploy to Vercel (alternative)
    - name: Deploy to Vercel
      if: ${{ contains(github.event.head_commit.message, '[deploy-vercel]') }}
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'
        working-directory: ./
        
    - name: Comment deployment status
      if: success()
      uses: actions/github-script@v7
      with:
        script: |
          const deployment_url = process.env.CLOUDFLARE_DEPLOYMENT_URL || process.env.VERCEL_URL || 'https://your-site.pages.dev';
          github.rest.issues.createComment({
            issue_number: context.issue.number || 1,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `🚀 部署成功！\n\n📋 构建详情:\n- ✅ TypeScript 检查通过\n- ✅ 代码检查通过\n- ✅ 测试通过\n- ✅ 站点构建完成\n\n🌐 访问地址: ${deployment_url}`
          });
          
    - name: Notify on failure
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number || 1,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `❌ 部署失败！\n\n请检查构建日志: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
          });

  # Performance and SEO audit
  audit:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: success()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Audit URLs using Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './lighthouse.config.js'
        uploadArtifacts: true
        temporaryPublicStorage: true
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Security scan
  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security audit
      run: |
        npm audit --audit-level high
        
    - name: Scan for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified